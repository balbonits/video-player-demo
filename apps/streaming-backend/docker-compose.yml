# Docker Compose for Video Streaming Backend
# Casey - Senior DevOps Engineer
# Local development and testing environment

version: '3.8'

services:
  # Main streaming backend service
  streaming-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: video-streaming-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - LOG_LEVEL=debug
    volumes:
      # Mount source code for development hot reload
      - .:/app
      - /app/node_modules
      # Mount logs directory
      - ./logs:/app/logs
    networks:
      - streaming-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for session management and caching (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: streaming-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - streaming-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Nginx for load balancing and caching (production simulation)
  nginx:
    image: nginx:alpine
    container_name: streaming-nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - streaming-backend
    networks:
      - streaming-network
    restart: unless-stopped

  # Prometheus for metrics collection (monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: streaming-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - streaming-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

networks:
  streaming-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local